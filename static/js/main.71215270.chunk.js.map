{"version":3,"sources":["components/NavigationBar.js","components/Jumbotron.js","components/Layout.js","Home.js","About.js","Contact.js","NoMatch.js","WEB_CHAT/ChatInput.js","WEB_CHAT/TextBox.js","WEB_CHAT/MessageList.js","WEB_CHAT/AscToolsWebChat.js","WEB_CHAT/App.js","AscToolsSite.js","WEB_CHAT/serviceWorker.js","index.js","assets/boatImage.jpg"],"names":["Styles","styled","div","NavigationBar","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Item","Link","to","boatImage","Jumbotron","fluid","class","Layout","props","Container","children","Home","src","alt","About","Contact","NoMatch","useSendMessage","hooks","ChatInput","sendMessage","useState","sendBoxValue","setSendBoxValue","handleChange","useCallback","value","target","handleSubmit","event","preventDefault","onSubmit","autoFocus","onKeyDown","e","keyCode","shiftKey","onChange","Button","variant","onClick","TextBox","thisStyle","userName","user","alignSelf","flexShrink","minWidth","marginLeft","marginRight","Toast","style","Header","closeButton","time","Body","message","useActivities","MessageList","activities","console","log","filter","type","textBoxes","map","thisMessage","key","from","role","timestamp","substring","text","forceScroll","AscToolsWebChat","vh","window","innerHeight","vw","innerWidth","document","documentElement","setProperty","addEventListener","process","DIRECT_LINE_SECRET","a","fetch","method","headers","res","json","token","App","React","directLine","setDirectLine","getDirectLineToken","then","createDirectLine","Composer","AscToolsSite","Fragment","exact","path","component","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","module","exports"],"mappings":"0kBAKA,IAAMA,EAASC,IAAOC,IAAV,KAeCC,EAAgB,kBAC3B,kBAACH,EAAD,KACE,kBAACI,EAAA,EAAD,CAAQC,OAAO,MACb,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,KAAnB,kBACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,UAIF,kBAACJ,EAAA,EAAIG,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,QAAT,SAGJ,kBAACJ,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,UAAT,WAGJ,kBAACJ,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,YAAT,kB,0cCvCd,IAAMhB,EAASC,IAAOC,IAAV,IAEUe,KAoBTC,EAAY,kBACvB,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACN,UAAU,SACrB,yBAAKA,UAAU,YAEf,yBAAKO,MAAM,uBACP,yBAAKA,MAAM,OACT,wBAAIA,MAAM,aAAV,WACA,uBAAGA,MAAM,aAAT,wC,UChCCC,EAAS,SAACC,GAAD,OACpB,kBAACC,EAAA,EAAD,KACGD,EAAME,WCAEC,EAAO,kBAClB,kBAAC,EAAD,KACD,kBAAC,EAAD,MACG,kBAAC,EAAD,MACC,4BAAQL,MAAM,mCACf,yBAAKA,MAAM,oBACT,yBAAKA,MAAM,aACT,uBAAGb,KAAK,MAAMa,MAAM,4CAApB,iBAMN,iCACE,yBAAKA,MAAM,aACT,yBAAKA,MAAM,0BACT,yBAAKA,MAAM,uBACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,2BAA2BM,IAAI,aAAaC,IAAI,OAG/D,yBAAKP,MAAM,uBACT,yBAAKA,MAAM,OACT,wBAAIA,MAAM,aAAV,gBACA,+GAOV,iCACE,yBAAKA,MAAM,aACT,yBAAKA,MAAM,0BACT,yBAAKA,MAAM,YACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,2BAA2BM,IAAI,aAAaC,IAAI,OAG/D,yBAAKP,MAAM,YACT,yBAAKA,MAAM,OACT,wBAAIA,MAAM,aAAV,gBACA,+EAOV,iCACE,yBAAKA,MAAM,aACT,yBAAKA,MAAM,0BACT,yBAAKA,MAAM,uBACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,2BAA2BM,IAAI,aAAaC,IAAI,OAG/D,yBAAKP,MAAM,uBACT,yBAAKA,MAAM,OACT,wBAAIA,MAAM,aAAV,cACA,mFC5DCQ,EAAQ,kBACnB,kBAAC,EAAD,KACD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACG,wBAAIR,MAAM,aAAV,aACA,6BACE,uBAAGA,MAAM,aAAT,qBACA,uBAAGA,MAAM,aAAT,cACA,6BACA,+BCTOS,EAAU,kBACrB,kBAAC,EAAD,KACD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACG,wBAAIT,MAAM,aAAV,eACA,6BACE,uBAAGA,MAAM,aAAT,0CACA,uBAAGA,MAAM,aAAT,cACF,6BACA,+BCTSU,EAAU,kBACrB,kBAAC,EAAD,KACD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACG,0C,6DCLIC,EAAmBC,QAAnBD,eAyCOE,MAvCf,WACC,IAAMC,EAAcH,IADA,EAKoBI,mBAAS,IAL7B,mBAKbC,EALa,KAKCC,EALD,KAOdC,EAAeC,uBAAY,gBAAaC,EAAb,EAAGC,OAAUD,MAAb,OAA2BH,EAAgBG,KAAQ,CAACH,IAK/EK,EAAeH,uBACpB,SAAAI,GACCA,EAAMC,iBACNV,EAAYE,GACZC,EAAgB,MAEjB,CAACD,EAAcF,EAAaG,IAY7B,OACC,gCACE,0BAAMQ,SAAUH,GACf,8BAAU7B,UAAU,YAAYiC,WAAW,EAAMC,UAXhC,SAACC,GACJ,KAAdA,EAAEC,UAAiC,IAAfD,EAAEE,WACxBF,EAAEJ,iBACFV,EAAYE,GACZC,EAAgB,MAO4Dc,SAAUb,EAAcE,MAAOJ,KAE1G,kBAACgB,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,QAASZ,GAA7C,U,SCdWa,MAxBf,SAAiBjC,GACb,IAAIkC,EAAY,GACZC,EAAW,GAWf,MAVmB,QAAfnC,EAAMoC,MACND,EAAW,kBACXD,EAAY,CAACG,UAAW,aAAcC,WAAW,EAAGC,SAAS,QAASC,WAAY,SAIlFL,EAAW,MACXD,EAAY,CAACG,UAAW,WAAYC,WAAW,EAAGC,SAAS,QAASE,YAAa,QAIjF,kBAACC,EAAA,EAAD,CAAOC,MAAOT,GACV,kBAACQ,EAAA,EAAME,OAAP,CAAcC,aAAa,GACvB,4BAAQtD,UAAU,WAAW4C,GAC7B,+BAAQnC,EAAM8C,OAElB,kBAACJ,EAAA,EAAMK,KAAP,KAAa/C,EAAMgD,W,SCjBvBC,EAAkBvC,QAAlBuC,cA+COC,MA7Cf,WAAuB,MAKED,IAAdE,EALY,oBAOnBC,QAAQC,IAAIF,GAuBZA,EAAWG,QAAO,kBAAuB,YAAvB,EAAGC,QAErB,IAAIC,EAAYL,EAAWM,KAAI,SAAAC,GAAW,OAAI,kBAAC,EAAD,CAC1CC,IAAKD,EAAYrE,GACjB+C,KAAMsB,EAAYE,KAAKC,KACvBf,KAAMY,EAAYI,UAAUC,UAAU,GAAI,IAC1Cf,QAASU,EAAYM,UAEzB,OACI,kBAAC,IAAD,CAAgBC,YAAY,OAAO1E,UAAU,eACxCiE,I,QCdEU,MA1Bf,WACC,IAAIC,EAA0B,IAArBC,OAAOC,YACZC,EAAyB,IAApBF,OAAOG,WAahB,OAXAC,SAASC,gBAAgB9B,MAAM+B,YAAY,OAA3C,UAAsDP,EAAtD,OACAK,SAASC,gBAAgB9B,MAAM+B,YAAY,OAA3C,UAAsDJ,EAAtD,OAEAF,OAAOO,iBAAiB,UAAU,WAEjC,IAAIR,EAA0B,IAArBC,OAAOC,YACZC,EAAyB,IAApBF,OAAOG,WAChBC,SAASC,gBAAgB9B,MAAM+B,YAAY,OAA3C,UAAsDP,EAAtD,OACAK,SAASC,gBAAgB9B,MAAM+B,YAAY,OAA3C,UAAsDJ,EAAtD,UAIA,6BACC,yBAAK/E,UAAU,oBACd,kBAAC,EAAD,MACA,kBAAC,EAAD,SCrBWqF,gIAAYC,mB,4CAE3B,gCAAAC,EAAA,sEACoBC,MAAM,oEAAqE,CAAEC,OAAQ,OAEvGC,QAAS,CAEL,cAAiB,oEALvB,cACQC,EADR,gBAO0BA,EAAIC,OAP9B,uBAOUC,EAPV,EAOUA,MAPV,kBASSA,GATT,4C,sBAkCeC,MAtBf,WAAgB,IAAD,EACuBC,IAAMzE,WAD7B,mBACN0E,EADM,KACMC,EADN,KAWb,OARKD,G,0CAEHE,GAAqBC,MAAK,SAAAN,GAAK,OAAII,EAAcG,2BAAiB,CAAEP,cAOvE,+BACIG,GACG,kBAAC,aAAWK,SAAZ,CAAqBL,WAAYA,GAC/B,kBAAC,EAAD,SCPKM,G,+KAhBX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9F,IACjC,kBAAC,IAAD,CAAO6F,KAAK,SAASC,UAAW3F,IAChC,kBAAC,IAAD,CAAO0F,KAAK,WAAWC,UAAW1F,IAClC,kBAAC,IAAD,CAAOyF,KAAK,OAAOC,UAAWZ,IAC9B,kBAAC,IAAD,CAAOY,UAAWzF,W,GAVL0F,cCGPC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAkBhC,SAASiC,eAAe,SD6HpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5D,QAAQ4D,MAAMA,EAAMhE,a,4DEzI5BiE,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.71215270.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst Styles = styled.div`\r\n  .navbar {\r\n    background-color: #C1D5E0\r\n    ;\r\n  }\r\n\r\n  a, .navbar-brand, .navbar-nav .nav-link {\r\n    color: white;\r\n\r\n    &:hover {\r\n      color: white;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const NavigationBar = () => (\r\n  <Styles>\r\n    <Navbar expand=\"lg\">\r\n      <Navbar.Brand href=\"/\">Asclepius Tool</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Item>\r\n            <Nav.Link>\r\n              <Link to=\"/\">Home</Link>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n         \r\n            <Nav.Link>\r\n              <Link to=\"/App\">Chat</Link>\r\n            </Nav.Link>\r\n          \r\n          <Nav.Item>\r\n            <Nav.Link>\r\n              <Link to=\"/about\">About</Link>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link>\r\n              <Link to=\"/contact\">Contact</Link>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  </Styles >\r\n)\r\n","import React from 'react';\r\nimport { Jumbotron as Jumbo } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport boatImage from '../assets/boatImage.jpg';\r\n\r\nconst Styles = styled.div`\r\n  .jumbo {\r\n    background: url(${boatImage}) no-repeat fixed bottom;\r\n    background-size: cover;\r\n    color: #efefef;\r\n    height: 350px;\r\n    position: relative; \r\n    z-index: -2; \r\n  }\r\n\r\n  .overlay {\r\n    background-color: transparent;\r\n    opacity: 0.0;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\nexport const Jumbotron = () => (\r\n  <Styles>\r\n    <Jumbo fluid className=\"jumbo\">\r\n      <div className=\"overlay\"></div>\r\n      \r\n      <div class=\"col-lg-8 order-lg-1\">\r\n          <div class=\"p-5\">\r\n            <h2 class=\"display-1\">Welcome</h2>\r\n            <p class=\"display-4\">A lifestyle recommendation app!</p>\r\n          </div>\r\n        </div>\r\n      \r\n    </Jumbo>\r\n  </Styles>\r\n)\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport const Layout = (props) => (\r\n  <Container>\r\n    {props.children}\r\n  </Container>\r\n)\r\n","import React from 'react'\r\nimport { NavigationBar } from './components/NavigationBar';\r\nimport { Jumbotron } from './components/Jumbotron';\r\nimport { Layout } from './components/Layout';\r\n\r\nexport const Home = () => (\r\n  <Layout>\r\n\t<NavigationBar />\r\n    <Jumbotron />\r\n     <header class=\"masthead text-center text-white\">\r\n    <div class=\"masthead-content\">\r\n      <div class=\"container\">\r\n        <a href=\"App\" class=\"btn btn-primary btn-xl rounded-pill mt-5\">Begin Chat</a>\r\n      </div>\r\n    </div>\r\n\r\n  </header>\r\n\r\n  <section>\r\n    <div class=\"container\">\r\n      <div class=\"row align-items-center\">\r\n        <div class=\"col-lg-6 order-lg-2\">\r\n          <div class=\"p-5\">\r\n            <img class=\"img-fluid rounded-circle\" src=\"img/01.jpg\" alt=\"\" />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-6 order-lg-1\">\r\n          <div class=\"p-5\">\r\n            <h2 class=\"display-4\">insert title</h2>\r\n            <p>nsert text, not finished as no pictures yet pictures will go in empty space</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <section>\r\n    <div class=\"container\">\r\n      <div class=\"row align-items-center\">\r\n        <div class=\"col-lg-6\">\r\n          <div class=\"p-5\">\r\n            <img class=\"img-fluid rounded-circle\" src=\"img/02.jpg\" alt=\"\" />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-6\">\r\n          <div class=\"p-5\">\r\n            <h2 class=\"display-4\">insert title</h2>\r\n            <p>nsert text, not finished as no pictures yet</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <section>\r\n    <div class=\"container\">\r\n      <div class=\"row align-items-center\">\r\n        <div class=\"col-lg-6 order-lg-2\">\r\n          <div class=\"p-5\">\r\n            <img class=\"img-fluid rounded-circle\" src=\"img/03.jpg\" alt=\"\" />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-6 order-lg-1\">\r\n          <div class=\"p-5\">\r\n            <h2 class=\"display-4\">nsert text</h2>\r\n            <p>nsert text, , not finished as no pictures yet</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n</Layout>\r\n)\r\n","import React from 'react'\r\nimport { NavigationBar } from './components/NavigationBar';\r\nimport { Jumbotron } from './components/Jumbotron';\r\nimport { Layout } from './components/Layout';\r\n\r\nexport const About = () => (\r\n  <Layout>\r\n\t<NavigationBar />\r\n\t<Jumbotron />\r\n    <h2 class=\"display-3\">About Us!</h2>\r\n    <br/>\r\n      <p class=\"display-5\">Nothin really....</p>\r\n      <p class=\"display-5\">Thank You!</p>\r\n      <br/>\r\n      <br/>\r\n  </Layout>\r\n)\r\n","import React from 'react';\r\nimport { NavigationBar } from './components/NavigationBar';\r\nimport { Jumbotron } from './components/Jumbotron';\r\nimport { Layout } from './components/Layout';\r\n\r\nexport const Contact = () => (\r\n  <Layout>\r\n\t<NavigationBar />\r\n\t<Jumbotron />\r\n    <h2 class=\"display-3\">Contact Us!</h2>  \r\n    <br/>\r\n      <p class=\"display-5\">You can reach us at XXXXXXXX@gmail.com</p>\r\n      <p class=\"display-5\">Thank You!</p>\r\n    <br/>\r\n    <br/>\r\n  </Layout>\r\n)\r\n","import React from 'react';\r\nimport { NavigationBar } from './components/NavigationBar';\r\nimport { Jumbotron } from './components/Jumbotron';\r\nimport { Layout } from './components/Layout';\r\n\r\nexport const NoMatch = () => (\r\n  <Layout>\r\n\t<NavigationBar />\r\n\t<Jumbotron />\r\n    <h2>No Match</h2>\r\n  </Layout>\r\n)\r\n","import React, { useCallback, useState } from 'react';\r\nimport { hooks } from 'botframework-webchat-component';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst { useSendMessage } = hooks;\r\n\r\nfunction ChatInput() {\r\n\tconst sendMessage = useSendMessage();\r\n\r\n\t// sendBoxValue is initialised as '', as nothing has been typed in yet. \r\n\t// When we call setSendBoxValue, we can update the value in the sendBox\r\n\tconst [sendBoxValue, setSendBoxValue] = useState('');\r\n\r\n\tconst handleChange = useCallback(({ target: { value } }) => setSendBoxValue(value), [setSendBoxValue]);\r\n\r\n\t// This is called when we want to send a message, the sendMessage function uses the hooks\r\n\t// from the botframework-webchat-component to relay our message, and then we must manually update\r\n\t// the submit box text\r\n\tconst handleSubmit = useCallback(\r\n\t\tevent => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tsendMessage(sendBoxValue);\r\n\t\t\tsetSendBoxValue('');\r\n\t\t},\r\n\t\t[sendBoxValue, sendMessage, setSendBoxValue]);\r\n\r\n\t// Since we're using a textarea for input, I had to create this function so that if the user presses enter\r\n\t// it sends the sendBoxValue, instead of skipping to a new line. \r\n\tconst onEnterPress = (e) => {\r\n\t\tif(e.keyCode === 13 && e.shiftKey === false) {\r\n\t\t\te.preventDefault();\r\n\t\t\tsendMessage(sendBoxValue);\r\n\t\t\tsetSendBoxValue('');\r\n\t\t}\r\n\t }\r\n\r\n\treturn (\r\n\t\t<footer>\r\n\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t<textarea className=\"UserInput\" autoFocus={true} onKeyDown={onEnterPress} onChange={handleChange} value={sendBoxValue}/>\r\n\t\t\t\t</form>\r\n\t\t\t\t<Button variant=\"outline-secondary\" onClick={handleSubmit}>Send</Button>\r\n\t\t</footer>);\r\n}\r\n\r\nexport default ChatInput;\r\n","import React from \"react\";\r\nimport Toast from 'react-bootstrap/Toast';\r\n\r\nfunction TextBox(props) {\r\n    var thisStyle = {};\r\n    var userName = \"\";\r\n    if (props.user === \"bot\") {\r\n        userName = \"Asclepius.Tools\";\r\n        thisStyle = {alignSelf: \"flex-start\", flexShrink:0, minWidth:\"100px\", marginLeft: \"1vw\"};\r\n        \r\n    }\r\n    else{ // if(props.user = \"user\") \r\n        userName = \"You\";\r\n        thisStyle = {alignSelf: \"flex-end\", flexShrink:0, minWidth:\"100px\", marginRight: \"1vw\"};\r\n    }\r\n\r\n    return (\r\n        <Toast style={thisStyle}>\r\n            <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">{userName}</strong>\r\n                <small>{props.time}</small>\r\n            </Toast.Header>\r\n            <Toast.Body>{props.message}</Toast.Body>\r\n        </Toast> \r\n    );\r\n}\r\n\r\nexport default TextBox;\r\n","import React from 'react';\r\nimport TextBox from \"./TextBox.js\";\r\nimport { hooks } from 'botframework-webchat-component';\r\nimport ScrollableFeed from 'react-scrollable-feed';\r\n\r\nconst { useActivities } = hooks;\r\n\r\nfunction MessageList() {\r\n    // activities are the array of all messages to display on the screen\r\n    // if you want to see what the activities look like, uncomment the following line,\r\n    // build the app and open the developers options in firefox\r\n\r\n    const [activities] = useActivities();\r\n\r\n    console.log(activities);\r\n\r\n    // CAN IGNORE THIS FOR TIME BEING\r\n    /*\r\n\tWe can filter activites by their properties, this is how the default app filters them but\r\n\twe can have a look at these later and see which ones we need and don't need:\r\n\tactivities\r\n          // Currently, this sample only displays an activity of type \"message\"\r\n          .filter(({ type }) => type === 'message')\r\n          // We need to hide \"postBack\" message sent by the user\r\n          \r\n          // Normalize the activity:\r\n          // - Every activity should have an \"attachments\" array, consisting of zero or more attachments:\r\n          // - If this is a \"messageBack\" message, we should use the \"displayText\",\r\n          //   because \"text\" is being submitted to bot, and \"displayText\" is what we use to override what the bot displays to the user.\r\n          .map(activity => ({\r\n            ...activity,\r\n            attachments: activity.attachments || [],\r\n            text: getValueOrUndefined(activity, 'channelData', 'messageBack', 'displayText') || activity.text\r\n          }))\r\n\t\t  \r\n\t*/\r\n\r\n    activities.filter(({ type }) => type === 'message');\r\n\r\n    var textBoxes = activities.map(thisMessage => <TextBox\r\n        key={thisMessage.id}\r\n        user={thisMessage.from.role}\r\n        time={thisMessage.timestamp.substring(11, 19)}\r\n        message={thisMessage.text} />);\r\n\r\n    return (\r\n        <ScrollableFeed forceScroll=\"true\" className=\"MessageList\">\r\n            {textBoxes}\r\n        </ScrollableFeed>\r\n    );\r\n}\r\n\r\nexport default MessageList;","import React from 'react';\r\n\r\nimport ChatInput from \"./ChatInput.js\";\r\nimport MessageList from \"./MessageList.js\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction AscToolsWebChat() {\r\n\tlet vh = window.innerHeight * 0.01;\r\n\tlet vw = window.innerWidth * 0.01;\r\n\t// Then we set the value in the --vh custom property to the root of the document\r\n\tdocument.documentElement.style.setProperty('--vh', `${vh}px`);\r\n\tdocument.documentElement.style.setProperty('--vw', `${vw}px`);\r\n\r\n\twindow.addEventListener('resize', () => {\r\n\t\t// We execute the same script as before\r\n\t\tlet vh = window.innerHeight * 0.01;\r\n\t\tlet vw = window.innerWidth * 0.01;\r\n\t\tdocument.documentElement.style.setProperty('--vh', `${vh}px`);\r\n\t\tdocument.documentElement.style.setProperty('--vw', `${vw}px`);\r\n\t  });\r\n\t\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<div className=\"WindowBackground\">\r\n\t\t\t\t<MessageList/>\r\n\t\t\t\t<ChatInput />\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default AscToolsWebChat;","import { Components } from 'botframework-webchat-component';\r\nimport { createDirectLine } from 'botframework-webchat';\r\nimport React from 'react';\r\nimport AscToolsWebChat from \"./AscToolsWebChat\";\r\n\r\nconst secret = process.env.DIRECT_LINE_SECRET;\r\n\r\nasync function getDirectLineToken() {\r\n  const res = await fetch('https://directline.botframework.com/v3/directline/tokens/generate', { method: 'POST', \r\n//  mode: 'no-cors',\r\n  headers: {\r\n//      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer jnLsvivnLz0.YXh4pTEiXu_VSWzg6aEHwmPpVMPvq_Tkg8T51EHsR7A'\r\n      }});\r\n  const { token } = await res.json();\r\n\r\n  return token;\r\n}\r\n\r\nfunction App() {\r\n  const [directLine, setDirectLine] = React.useState();\r\n\r\n  if (!directLine) {\r\n    // We will load DirectLineJS asynchronously on first render.\r\n    getDirectLineToken().then(token => setDirectLine(createDirectLine({ token })));\r\n  }\r\n\r\n// The following return value is just to let us know if we are connected to the MockBot\r\n// When running the app, it should switch from \"Not Connected!\" to \"Connected!\" quickly\r\n\r\n  return (\r\n\t<div>\r\n\t\t{!!directLine && (\r\n        <Components.Composer directLine={directLine}>\r\n          <AscToolsWebChat />\r\n        </Components.Composer>\r\n      )}\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { Home } from './Home';\r\nimport { About } from './About';\r\nimport { Contact } from './Contact';\r\nimport { NoMatch } from './NoMatch';\r\nimport App from './WEB_CHAT/App';\r\nimport './cssForWebVersion.css';\r\n\r\nclass AscToolsSite extends Component {\r\n  render() { \r\n    return (\r\n      <React.Fragment>\r\n        <Router>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route path=\"/about\" component={About} />\r\n              <Route path=\"/contact\" component={Contact} />\r\n              <Route path=\"/App\" component={App} />\r\n              <Route component={NoMatch} />\r\n            </Switch>\r\n        </Router>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AscToolsSite;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AscToolsSite from './AscToolsSite';\r\nimport * as serviceWorker from './WEB_CHAT/serviceWorker';\r\n\r\nReactDOM.render(<AscToolsSite />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/boatImage.5bb53262.jpg\";"],"sourceRoot":""}