{"version":3,"sources":["ChatInput.js","TextBox.js","MessageList.js","AscToolsWebChat.js","App.js","index.js"],"names":["useSendMessage","hooks","ChatInput","sendMessage","useState","sendBoxValue","setSendBoxValue","handleChange","useCallback","value","target","handleSubmit","event","preventDefault","onSubmit","className","autoFocus","onKeyDown","e","keyCode","shiftKey","onChange","Button","variant","onClick","TextBox","props","thisStyle","userName","user","alignSelf","flexShrink","minWidth","marginLeft","marginRight","Toast","style","Header","closeButton","time","Body","message","useActivities","MessageList","activities","console","log","filter","type","textBoxes","map","thisMessage","key","id","from","role","timestamp","substring","text","forceScroll","AscToolsWebChat","vh","window","innerHeight","vw","innerWidth","document","documentElement","setProperty","addEventListener","process","DIRECT_LINE_SECRET","a","fetch","method","headers","res","json","token","App","React","directLine","setDirectLine","getDirectLineToken","then","createDirectLine","Composer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.03ad8f12.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport ReactDOM from \"react-dom\"\r\nimport { hooks } from 'botframework-webchat-component';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst { useSendMessage } = hooks;\r\n\r\nfunction ChatInput() {\r\n\tconst sendMessage = useSendMessage();\r\n\r\n\t// sendBoxValue is initialised as '', as nothing has been typed in yet. \r\n\t// When we call setSendBoxValue, we can update the value in the sendBox\r\n\tconst [sendBoxValue, setSendBoxValue] = useState('');\r\n\r\n\tconst handleChange = useCallback(({ target: { value } }) => setSendBoxValue(value), [setSendBoxValue]);\r\n\r\n\t// This is called when we want to send a message, the sendMessage function uses the hooks\r\n\t// from the botframework-webchat-component to relay our message, and then we must manually update\r\n\t// the submit box text\r\n\tconst handleSubmit = useCallback(\r\n\t\tevent => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tsendMessage(sendBoxValue);\r\n\t\t\tsetSendBoxValue('');\r\n\t\t},\r\n\t\t[sendBoxValue, sendMessage, setSendBoxValue]);\r\n\r\n\t// Since we're using a textarea for input, I had to create this function so that if the user presses enter\r\n\t// it sends the sendBoxValue, instead of skipping to a new line. \r\n\tconst onEnterPress = (e) => {\r\n\t\tif(e.keyCode === 13 && e.shiftKey === false) {\r\n\t\t\te.preventDefault();\r\n\t\t\tsendMessage(sendBoxValue);\r\n\t\t\tsetSendBoxValue('');\r\n\t\t}\r\n\t }\r\n\r\n\treturn (\r\n\t\t<footer>\r\n\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t<textarea className=\"UserInput\" autoFocus={true} onKeyDown={onEnterPress} onChange={handleChange} value={sendBoxValue}/>\r\n\t\t\t\t</form>\r\n\t\t\t\t<Button variant=\"outline-secondary\" onClick={handleSubmit}>Send</Button>\r\n\t\t</footer>);\r\n}\r\n\r\nexport default ChatInput;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Toast from 'react-bootstrap/Toast';\r\n\r\nfunction TextBox(props) {\r\n    var thisStyle = {};\r\n    var userName = \"\";\r\n    if (props.user === \"bot\") {\r\n        userName = \"Asclepius.Tools\";\r\n        thisStyle = {alignSelf: \"flex-start\", flexShrink:0, minWidth:\"100px\", marginLeft: \"1vw\"};\r\n        \r\n    }\r\n    else{ // if(props.user = \"user\") \r\n        userName = \"You\";\r\n        thisStyle = {alignSelf: \"flex-end\", flexShrink:0, minWidth:\"100px\", marginRight: \"1vw\"};\r\n    }\r\n\r\n    return (\r\n        <Toast style={thisStyle}>\r\n            <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">{userName}</strong>\r\n                <small>{props.time}</small>\r\n            </Toast.Header>\r\n            <Toast.Body>{props.message}</Toast.Body>\r\n        </Toast> \r\n    );\r\n}\r\n\r\nexport default TextBox;\r\n","import React from 'react';\r\nimport TextBox from \"./TextBox.js\";\r\nimport { hooks } from 'botframework-webchat-component';\r\nimport ScrollableFeed from 'react-scrollable-feed'\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst { useActivities } = hooks;\r\n\r\nfunction MessageList() {\r\n    // activities are the array of all messages to display on the screen\r\n    // if you want to see what the activities look like, uncomment the following line,\r\n    // build the app and open the developers options in firefox\r\n\r\n    const [activities] = useActivities();\r\n    const scrolledToBottom = true;\r\n\r\n    console.log(activities);\r\n\r\n    // CAN IGNORE THIS FOR TIME BEING\r\n    /*\r\n\tWe can filter activites by their properties, this is how the default app filters them but\r\n\twe can have a look at these later and see which ones we need and don't need:\r\n\tactivities\r\n          // Currently, this sample only displays an activity of type \"message\"\r\n          .filter(({ type }) => type === 'message')\r\n          // We need to hide \"postBack\" message sent by the user\r\n          \r\n          // Normalize the activity:\r\n          // - Every activity should have an \"attachments\" array, consisting of zero or more attachments:\r\n          // - If this is a \"messageBack\" message, we should use the \"displayText\",\r\n          //   because \"text\" is being submitted to bot, and \"displayText\" is what we use to override what the bot displays to the user.\r\n          .map(activity => ({\r\n            ...activity,\r\n            attachments: activity.attachments || [],\r\n            text: getValueOrUndefined(activity, 'channelData', 'messageBack', 'displayText') || activity.text\r\n          }))\r\n\t\t  \r\n\t*/\r\n\r\n    activities.filter(({ type }) => type === 'message');\r\n\r\n    var textBoxes = activities.map(thisMessage => <TextBox\r\n        key={thisMessage.id}\r\n        user={thisMessage.from.role}\r\n        time={thisMessage.timestamp.substring(11, 19)}\r\n        message={thisMessage.text} />);\r\n\r\n    return (\r\n        <ScrollableFeed forceScroll=\"true\" className=\"MessageList\">\r\n            {textBoxes}\r\n        </ScrollableFeed>\r\n    );\r\n}\r\n\r\nexport default MessageList;","import React from 'react';\r\n\r\nimport ChatInput from \"./ChatInput.js\";\r\nimport MessageList from \"./MessageList.js\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nfunction AscToolsWebChat() {\r\n\tlet vh = window.innerHeight * 0.01;\r\n\tlet vw = window.innerWidth * 0.01;\r\n\t// Then we set the value in the --vh custom property to the root of the document\r\n\tdocument.documentElement.style.setProperty('--vh', `${vh}px`);\r\n\tdocument.documentElement.style.setProperty('--vw', `${vw}px`);\r\n\r\n\twindow.addEventListener('resize', () => {\r\n\t\t// We execute the same script as before\r\n\t\tlet vh = window.innerHeight * 0.01;\r\n\t\tlet vw = window.innerWidth * 0.01;\r\n\t\tdocument.documentElement.style.setProperty('--vh', `${vh}px`);\r\n\t\tdocument.documentElement.style.setProperty('--vw', `${vw}px`);\r\n\t  });\r\n\t\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<div className=\"WindowBackground\">\r\n\t\t\t\t<MessageList/>\r\n\t\t\t\t<ChatInput />\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default AscToolsWebChat;","import { Components } from 'botframework-webchat-component';\r\nimport { createDirectLine } from 'botframework-webchat';\r\nimport React from 'react';\r\nimport AscToolsWebChat from \"./AscToolsWebChat\";\r\n\r\n\r\nvar connected = false;\r\nconst secret = process.env.DIRECT_LINE_SECRET;\r\n\r\nasync function getDirectLineToken() {\r\n  const res = await fetch('https://directline.botframework.com/v3/directline/tokens/generate', { method: 'POST', \r\n//  mode: 'no-cors',\r\n  headers: {\r\n//      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer jnLsvivnLz0.YXh4pTEiXu_VSWzg6aEHwmPpVMPvq_Tkg8T51EHsR7A'\r\n      }});\r\n  const { token } = await res.json();\r\n\r\n  return token;\r\n}\r\n\r\nfunction App() {\r\n  const [directLine, setDirectLine] = React.useState();\r\n\r\n  if (!directLine) {\r\n    // We will load DirectLineJS asynchronously on first render.\r\n    getDirectLineToken().then(token => setDirectLine(createDirectLine({ token })));\r\n  }\r\n\r\n// The following return value is just to let us know if we are connected to the MockBot\r\n// When running the app, it should switch from \"Not Connected!\" to \"Connected!\" quickly\r\n\r\n  return (\r\n\t<div>\r\n\t\t{!!directLine && (\r\n        <Components.Composer directLine={directLine}>\r\n          <AscToolsWebChat />\r\n        </Components.Composer>\r\n      )}\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n//import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}