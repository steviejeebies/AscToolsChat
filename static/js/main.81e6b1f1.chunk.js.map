{"version":3,"sources":["components/NavigationBar.js","components/Jumbotron.js","components/Layout.js","Home.js","About.js","Contact.js","NoMatch.js","components/validator.js","WEB_CHAT/ChatInput.js","WEB_CHAT/TextBox.js","WEB_CHAT/MessageList.js","WEB_CHAT/AscToolsWebChat.js","WEB_CHAT/App.js","components/Login.js","AscToolsSite.js","WEB_CHAT/serviceWorker.js","index.js","assets/boatImage.jpg"],"names":["Styles","styled","div","NavigationBar","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Item","Link","to","boatImage","Jumbotron","fluid","class","Layout","props","Container","style","padding","maxWidth","backgroundSize","children","Home","src","alt","About","paddingLeft","Contact","NoMatch","isEmpty","thing","empty","trim","length","Object","keys","useSendMessage","hooks","ChatInput","sendMessage","useState","sendBoxValue","setSendBoxValue","handleChange","useCallback","value","target","handleSubmit","event","preventDefault","onClickHandler","innerHTML","onSubmit","autoFocus","onKeyDown","e","keyCode","shiftKey","onChange","ButtonGroup","Button","variant","onClick","DropdownButton","as","alignRight","title","Dropdown","eventKey","TextBox","thisStyle","userName","user","alignSelf","flexShrink","minWidth","marginLeft","whiteSpace","marginRight","Toast","Header","closeButton","time","Body","message","useActivities","MessageList","activities","console","log","filter","type","today","Date","i","init","key","getHours","getMinutes","getSeconds","textBoxes","map","thisMessage","from","role","timestamp","substring","text","forceScroll","AscToolsWebChat","vh","window","innerHeight","vw","innerWidth","document","documentElement","setProperty","addEventListener","process","DIRECT_LINE_SECRET","a","fetch","method","headers","res","json","token","App","React","directLine","setDirectLine","getDirectLineToken","then","createDirectLine","Composer","Login","handleInputChange","name","formData","state","setState","validateLoginForm","email","str","errors","test","password","toString","indexOf","options","Error","isValid","len","lt","lte","gt","gte","isLength","login","history","push","formSubmitted","loading","this","Row","FormGroup","controlId","validationState","FormControl","size","placeholder","bsStyle","Component","AscToolsSite","renderContent","isMobile","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","module","exports"],"mappings":"yoBAKA,IAAMA,EAASC,IAAOC,IAAV,KAeCC,EAAgB,kBAC3B,kBAACH,EAAD,KACE,kBAACI,EAAA,EAAD,CAAQC,OAAO,MACb,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,KAAnB,kBACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,iBAAT,UAIF,kBAACJ,EAAA,EAAIG,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,SAAT,SAGJ,kBAACJ,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,UAAT,WAGJ,kBAACJ,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,YAAT,kB,ueCvCd,IAAMhB,EAASC,IAAOC,IAAV,IAEUe,KAqBTC,EAAY,kBACvB,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACN,UAAU,SACrB,yBAAKA,UAAU,YAEf,yBAAKO,MAAM,uBACP,yBAAKA,MAAM,OACT,wBAAIA,MAAM,aAAV,WACA,wBAAIA,MAAM,aAAV,wC,UCjCCC,EAAS,SAACC,GAAD,OACpB,kBAACC,EAAA,EAAD,CAAWC,MAAS,CAACC,QAAQ,MAAOC,SAAS,OAAQC,eAAe,SACjEL,EAAMM,WCCEC,EAAO,kBAClB,kBAAC,EAAD,KACD,kBAAC,EAAD,MACG,kBAAC,EAAD,MACC,4BAAQT,MAAM,mCACf,yBAAKA,MAAM,oBACT,yBAAKA,MAAM,aACT,kBAAC,IAAD,CAAMJ,GAAG,QAAQI,MAAM,4CAAvB,iBAMN,iCACE,yBAAKA,MAAM,aACT,yBAAKA,MAAM,0BACT,yBAAKA,MAAM,uBACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,2BAA2BU,IAAI,aAAaC,IAAI,OAG/D,yBAAKX,MAAM,uBACT,yBAAKA,MAAM,OACT,wBAAIA,MAAM,aAAV,2BACA,0FAOV,iCACE,yBAAKA,MAAM,aACT,yBAAKA,MAAM,0BACT,yBAAKA,MAAM,YACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,2BAA2BU,IAAI,aAAaC,IAAI,OAG/D,yBAAKX,MAAM,YACT,yBAAKA,MAAM,OACT,wBAAIA,MAAM,aAAV,sCACA,qFAOV,iCACE,yBAAKA,MAAM,aACT,yBAAKA,MAAM,0BACT,yBAAKA,MAAM,uBACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,2BAA2BU,IAAI,aAAaC,IAAI,OAG/D,yBAAKX,MAAM,uBACT,yBAAKA,MAAM,OACT,wBAAIA,MAAM,aAAV,wBACA,+FC7DCY,EAAQ,kBACnB,kBAAC,EAAD,KACD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACG,wBAAIZ,MAAM,YAAYI,MAAS,CAACS,YAAY,OAA5C,aACA,6BACE,uBAAGb,MAAM,YAAWI,MAAS,CAACS,YAAY,OAA1C,qBACA,uBAAGb,MAAM,YAAWI,MAAS,CAACS,YAAY,OAA1C,cACA,6BACA,+BCTOC,EAAU,kBACrB,kBAAC,EAAD,KACD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACG,wBAAId,MAAM,YAAWI,MAAS,CAACS,YAAY,OAA3C,eACA,6BACE,uBAAGb,MAAM,YAAWI,MAAS,CAACS,YAAY,OAA1C,0CACA,uBAAGb,MAAM,YAAWI,MAAS,CAACS,YAAY,OAA1C,cACF,6BACA,+BCTSE,EAAU,kBACrB,kBAAC,EAAD,KACD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACG,0CCMSC,EAAU,SAACC,GACpB,IAAIC,GAAQ,EAEZ,cAAeD,GACX,IAAK,YACDC,GAAQ,EACR,MACJ,IAAK,SAC2B,IAAxBD,EAAME,OAAOC,SACbF,GAAQ,GAEZ,MACJ,IAAK,UACa,OAAVD,GAEqC,IAA9BI,OAAOC,KAAKL,GAAOG,UAD1BF,GAAQ,GAIZ,MACJ,QACIA,GAAQ,EAGhB,OAAOA,G,+HC/BHK,EAAmBC,QAAnBD,eA2DOE,MAzDf,WACC,IAAMC,EAAcH,IADA,EAKoBI,mBAAS,IAL7B,mBAKbC,EALa,KAKCC,EALD,KAOdC,EAAeC,uBAAY,gBAAaC,EAAb,EAAGC,OAAUD,MAAb,OAA2BH,EAAgBG,KAAQ,CAACH,IAK/EK,EAAeH,uBACpB,SAAAI,GACCA,EAAMC,iBACNV,EAAYE,GACZC,EAAgB,MAEjB,CAACD,EAAcF,EAAaG,IAYpBQ,EAAiB,SAAAF,GACnBA,EAAMC,iBACN,IAAMJ,EAAQG,EAAMF,OAAOK,UACd,eAAVN,GACCN,EAAY,MACH,eAAVM,GACCN,EAAY,MACH,YAAVM,GACCN,EAAY,OAGvB,OACC,gCACE,0BAAMjC,UAAU,gBAAgB8C,SAAUL,GACzC,8BAAUzC,UAAU,YAAY+C,WAAW,EAAMC,UAtBhC,SAACC,GACJ,KAAdA,EAAEC,UAAiC,IAAfD,EAAEE,WACxBF,EAAEN,iBACFV,EAAYE,GACZC,EAAgB,MAkB4DgB,SAAUf,EAAcE,MAAOJ,KAE1G,kBAACkB,EAAA,EAAD,KACgB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,QAASf,GAA7C,QACA,kBAACgB,EAAA,EAAD,CAAgBC,GAAIL,IAAaM,YAAU,EAACC,MAAM,OAAO9D,GAAG,sBACxD,kBAAC+D,EAAA,EAAS5D,KAAV,CAAe6D,SAAS,IAAIvB,MAAQ,KAAKiB,QAAWZ,GAApD,WACA,kBAACiB,EAAA,EAAS5D,KAAV,CAAe6D,SAAS,IAAIvB,MAAQ,KAAKiB,QAAWZ,GAApD,cACA,kBAACiB,EAAA,EAAS5D,KAAV,CAAe6D,SAAS,IAAIvB,MAAQ,KAAKiB,QAAWZ,GAApD,kB,SCjCTmB,MAxBf,SAAiBtD,GACb,IAAIuD,EAAY,GACZC,EAAW,GAWf,MAVmB,QAAfxD,EAAMyD,MACND,EAAW,kBACXD,EAAY,CAACG,UAAW,aAAcC,WAAW,EAAGC,SAAS,QAASC,WAAY,MAAOC,WAAY,cAIrGN,EAAW,MACXD,EAAY,CAACG,UAAW,WAAYC,WAAW,EAAGC,SAAS,QAASG,YAAa,QAIjF,kBAACC,EAAA,EAAD,CAAO9D,MAAOqD,GACV,kBAACS,EAAA,EAAMC,OAAP,CAAcC,aAAa,GACvB,4BAAQ3E,UAAU,WAAWiE,GAC7B,+BAAQxD,EAAMmE,OAElB,kBAACH,EAAA,EAAMI,KAAP,KAAapE,EAAMqE,W,SCjBvBC,EAAkBhD,QAAlBgD,cAwDOC,MAtDf,WAAuB,MAKED,IAAdE,EALY,oBAOnBC,QAAQC,IAAIF,GAuBZA,EAAWG,QAAO,kBAAuB,YAAvB,EAAGC,QAErB,IAAIC,EAAQ,IAAIC,KACZC,EAAI,EACJC,EAAO,kBAAC,EAAD,CACPC,IAAOF,EACPtB,KAAO,MACPU,KAASU,EAAMK,WAAa,EAAK,IAAML,EAAMM,aAAe,IAAMN,EAAMO,aACxEf,QAAU,+GAEVgB,EAAYb,EAAWc,KAAI,SAAAC,GAAW,OAAI,kBAAC,EAAD,CAC1CN,MAAOF,EACPtB,KAAM8B,EAAYC,KAAKC,KACvBtB,KAAMoB,EAAYG,UAAUC,UAAU,GAAI,IAC1CtB,QAASkB,EAAYK,UAEzB,OACI,kBAAC,IAAD,CAAgBC,YAAY,OAAOtG,UAAU,eACxCyF,EACAK,I,QCvBES,MA1Bf,WACC,IAAIC,EAA0B,IAArBC,OAAOC,YACZC,EAAyB,IAApBF,OAAOG,WAahB,OAXAC,SAASC,gBAAgBnG,MAAMoG,YAAY,OAA3C,UAAsDP,EAAtD,OACAK,SAASC,gBAAgBnG,MAAMoG,YAAY,OAA3C,UAAsDJ,EAAtD,OAEAF,OAAOO,iBAAiB,UAAU,WAEjC,IAAIR,EAA0B,IAArBC,OAAOC,YACZC,EAAyB,IAApBF,OAAOG,WAChBC,SAASC,gBAAgBnG,MAAMoG,YAAY,OAA3C,UAAsDP,EAAtD,OACAK,SAASC,gBAAgBnG,MAAMoG,YAAY,OAA3C,UAAsDJ,EAAtD,UAIA,6BACC,yBAAK3G,UAAU,oBACd,kBAAC,EAAD,MACA,kBAAC,EAAD,SCrBSiH,mHAAYC,mB,8CAEzB,gCAAAC,EAAA,sEACoBC,MAAM,oEAAqE,CAAEC,OAAQ,OAEvGC,QAAS,CAEL,cAAiB,oEALvB,cACQC,EADR,gBAO0BA,EAAIC,OAP9B,uBAOUC,EAPV,EAOUA,MAPV,kBASSA,GATT,4C,sBAkCeC,OAtBf,WAAgB,IAAD,EACuBC,IAAMzF,WAD7B,mBACN0F,EADM,KACMC,EADN,KAWb,OARKD,G,2CAEHE,GAAqBC,MAAK,SAAAN,GAAK,OAAII,EAAcG,2BAAiB,CAAEP,cAOvE,+BACIG,GACG,kBAAC,aAAWK,SAAZ,CAAqBL,WAAYA,GAC/B,kBAAC,EAAD,SC4EKM,G,kDArGX,WAAYzH,GAAQ,IAAD,8BACf,cAAMA,IAUV0H,kBAAoB,SAACzF,GACjB,IAAMF,EAASE,EAAMF,OACfD,EAAQC,EAAOD,MACf6F,EAAO5F,EAAO4F,KAEdC,EAAa,EAAKC,MAAlBD,SACNA,EAASD,GAAQ7F,EAEjB,EAAKgG,SAAS,CACVF,SAAUA,KApBC,EAwBnBG,kBAAoB,SAACvF,GAEjB,IN9BgBwF,EAqFYC,EMvDxBC,EAAS,GACLN,EAAa,EAAKC,MAAlBD,SAkBR,OAhBI9G,EAAQ8G,EAASI,OACjBE,EAAOF,MAAQ,wBNlCHA,EMmCIJ,EAASI,MNlCtB,wJACDG,KAAKH,KMkCPE,EAAOF,MAAQ,+BAGflH,EAAQ8G,EAASQ,UACjBF,EAAOE,SAAW,0BN+CR,kBAFcH,EM5CIL,EAASQ,WN8CA,kBAARH,IACc,IAAxCA,EAAII,WAAWpH,OAAOqH,QAAQ,MA1CrB,SAACL,EAAKM,GAE1B,GAAIzH,EAAQyH,GACR,MAAM,IAAIC,MAAM,qCAGpB,IAAIC,GAAU,EAEd,IAAkD,IAA9C,CAAC,SAAU,UAAUH,eAAeL,GACpCQ,GAAU,MACP,CAEH,IAAIC,EAAM,EAGNA,EADDH,EAAQtH,KACDgH,EAAII,WAAWpH,OAAOC,OAEtB+G,EAAII,WAAWnH,QAGC,kBAAfqH,EAAQI,IAAmBD,GAAOH,EAAQI,IAEnB,kBAAhBJ,EAAQK,KAAoBF,EAAMH,EAAQK,KAE3B,kBAAfL,EAAQM,IAAmBH,GAAOH,EAAQM,IAE1B,kBAAhBN,EAAQO,KAAoBJ,EAAMH,EAAQO,OALxDL,GAAU,GAUlB,OAAOA,EMlCSM,CAASnB,EAASQ,SAAU,CAAEU,IAAK,EAAGF,IAAK,GAAI3H,MAAM,IAC7DiH,EAAOE,SAAW,yCACU,YAArBR,EAASQ,WAChBF,EAAOE,SAAW,+BAJlBF,EAAOE,SAAW,6CAOlBtH,EAAQoH,IAGDA,GAhDI,EAoDnBc,MAAQ,SAACxG,GAELA,EAAEN,iBAEF,IAAIgG,EAAS,EAAKH,qBAEJ,IAAXG,EAGC,EAAKlI,MAAMiJ,QAAQC,KAAK,QAGxB,EAAKpB,SAAS,CACVI,OAAQA,EACRiB,eAAe,KA/DvB,EAAKtB,MAAQ,CACTD,SAAU,GACVM,OAAQ,GACRiB,eAAe,EACfC,SAAS,GAPE,E,qDAuET,IAAD,EACoCC,KAAKxB,MAAtCK,EADH,EACGA,OAAQiB,EADX,EACWA,cADX,EAC0B1B,MAC/B,OACI,yBAAKlI,UAAU,SACb,kBAAC+J,EAAA,EAAD,KACM,0BAAMjH,SAAUgH,KAAKL,OACrB,uCACA,6BACI,kBAACO,EAAA,EAAD,CAAYC,UAAU,QAAQC,gBAAkBN,EAAiBjB,EAAOF,MAAQ,QAAU,UAAa,MACnG,qCACA,kBAAC0B,EAAA,EAAD,CAAaC,KAAK,KAAK/E,KAAK,OAAO+C,KAAK,QAAQiC,YAAY,mBAAmBjH,SAAU0G,KAAK3B,oBAChGQ,EAAOF,OACL,kCAAWE,EAAOF,QAGtB,kBAACuB,EAAA,EAAD,CAAWC,UAAU,WAAWC,gBAAkBN,EAAiBjB,EAAOE,SAAW,QAAU,UAAa,MACxG,wCACA,kBAACsB,EAAA,EAAD,CAAaC,KAAK,KAAK/E,KAAK,WAAW+C,KAAK,WAAWiC,YAAY,sBAAsBjH,SAAU0G,KAAK3B,oBAC1GQ,EAAOE,UACL,kCAAWF,EAAOE,WAGtB,kBAACvF,EAAA,EAAD,CAAQ+B,KAAK,SAASiF,QAAQ,WAA9B,kB,GA/FJC,a,oBC4BLC,G,4MAtBbC,cAAgB,WACd,OAAIC,YACO,kBAAC,GAAD,MAGP,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7J,IACjC,kBAAC,IAAD,CAAO4J,KAAK,SAASC,UAAW1J,IAChC,kBAAC,IAAD,CAAOyJ,KAAK,WAAWC,UAAWxJ,IAClC,kBAAC,IAAD,CAAOuJ,KAAK,QAAQC,UAAW3C,KAC/B,kBAAC,IAAD,CAAO0C,KAAK,OAAOC,UAAWnD,KAC9B,kBAAC,IAAD,CAAOmD,UAAWvJ,O,uDAM5B,OAAOwI,KAAKW,oB,GAnBWF,aCAPO,QACW,cAA7BrE,OAAOsE,SAASC,UAEe,UAA7BvE,OAAOsE,SAASC,UAEhBvE,OAAOsE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAAkBtE,SAASuE,eAAe,SD6HpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzG,QAAQyG,MAAMA,EAAM7G,a,4DEzI5B8G,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.81e6b1f1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst Styles = styled.div`\r\n  .navbar {\r\n    background-color: #C1D5E0\r\n    ;\r\n  }\r\n\r\n  a, .navbar-brand, .navbar-nav .nav-link {\r\n    color: white;\r\n\r\n    &:hover {\r\n      color: white;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const NavigationBar = () => (\r\n  <Styles>\r\n    <Navbar expand=\"lg\">\r\n      <Navbar.Brand href=\"/\">Asclepius Tool</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Item>\r\n            <Nav.Link>\r\n              <Link to=\"/AscToolsChat\">Home</Link>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n         \r\n            <Nav.Link>\r\n              <Link to=\"/Chat\">Chat</Link>\r\n            </Nav.Link>\r\n          \r\n          <Nav.Item>\r\n            <Nav.Link>\r\n              <Link to=\"/about\">About</Link>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link>\r\n              <Link to=\"/contact\">Contact</Link>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  </Styles >\r\n)\r\n","import React from 'react';\r\nimport { Jumbotron as Jumbo } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport boatImage from '../assets/boatImage.jpg';\r\n\r\nconst Styles = styled.div`\r\n  .jumbo {\r\n    background: url(${boatImage}) no-repeat fixed top;\r\n    background-size: cover;\r\n    color: #efefef;\r\n    background-color: #C1D5E0;\r\n    height: 350px;\r\n    position: relative; \r\n    z-index: -2; \r\n  }\r\n\r\n  .overlay {\r\n    background-color: transparent;\r\n    opacity: 0.0;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\nexport const Jumbotron = () => (\r\n  <Styles>\r\n    <Jumbo fluid className=\"jumbo\">\r\n      <div className=\"overlay\"></div>\r\n      \r\n      <div class=\"col-lg-8 order-lg-1\">\r\n          <div class=\"p-5\">\r\n            <h2 class=\"display-1\">Welcome</h2>\r\n            <h3 class=\"display-5\">A lifestyle recommendation app!</h3>\r\n          </div>\r\n        </div>\r\n      \r\n    </Jumbo>\r\n  </Styles>\r\n)\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nexport const Layout = (props) => (\r\n  <Container style = {{padding:\"0px\", maxWidth:\"100%\", backgroundSize:\"auto\"}}>\r\n    {props.children}\r\n  </Container>\r\n)\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { NavigationBar } from './components/NavigationBar';\r\nimport { Jumbotron } from './components/Jumbotron';\r\nimport { Layout } from './components/Layout';\r\n\r\nexport const Home = () => (\r\n  <Layout>\r\n\t<NavigationBar />\r\n    <Jumbotron />\r\n     <header class=\"masthead text-center text-white\">\r\n    <div class=\"masthead-content\">\r\n      <div class=\"container\">\r\n        <Link to=\"/Chat\" class=\"btn btn-primary btn-xl rounded-pill mt-5\">Begin Chat</Link>\r\n      </div>\r\n    </div>\r\n\r\n  </header>\r\n\r\n  <section>\r\n    <div class=\"container\">\r\n      <div class=\"row align-items-center\">\r\n        <div class=\"col-lg-6 order-lg-2\">\r\n          <div class=\"p-5\">\r\n            <img class=\"img-fluid rounded-circle\" src=\"img/01.jpg\" alt=\"\" />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-6 order-lg-1\">\r\n          <div class=\"p-5\">\r\n            <h2 class=\"display-4\">Get Dietary information</h2>\r\n            <p>Enter your patient's diagnosis and find dietary advice</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <section>\r\n    <div class=\"container\">\r\n      <div class=\"row align-items-center\">\r\n        <div class=\"col-lg-6\">\r\n          <div class=\"p-5\">\r\n            <img class=\"img-fluid rounded-circle\" src=\"img/02.jpg\" alt=\"\" />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-6\">\r\n          <div class=\"p-5\">\r\n            <h2 class=\"display-4\">Work in English, Spanish, or Dutch</h2>\r\n            <p>Type your language in the chat to use it instead!</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <section>\r\n    <div class=\"container\">\r\n      <div class=\"row align-items-center\">\r\n        <div class=\"col-lg-6 order-lg-2\">\r\n          <div class=\"p-5\">\r\n            <img class=\"img-fluid rounded-circle\" src=\"img/03.jpg\" alt=\"\" />\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-6 order-lg-1\">\r\n          <div class=\"p-5\">\r\n            <h2 class=\"display-4\">Try our WebExtension</h2>\r\n            <p>Opens chat straight away if you need to find advice quick</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n</Layout>\r\n)\r\n","import React from 'react'\r\nimport { NavigationBar } from './components/NavigationBar';\r\nimport { Jumbotron } from './components/Jumbotron';\r\nimport { Layout } from './components/Layout';\r\n\r\nexport const About = () => (\r\n  <Layout>\r\n\t<NavigationBar />\r\n\t<Jumbotron />\r\n    <h2 class=\"display-3\" style = {{paddingLeft:\"2%\"}}>About Us!</h2>\r\n    <br/>\r\n      <p class=\"display-5\"style = {{paddingLeft:\"2%\"}}>Nothin really....</p>\r\n      <p class=\"display-5\"style = {{paddingLeft:\"2%\"}}>Thank You!</p>\r\n      <br/>\r\n      <br/>\r\n  </Layout>\r\n)\r\n","import React from 'react';\r\nimport { NavigationBar } from './components/NavigationBar';\r\nimport { Jumbotron } from './components/Jumbotron';\r\nimport { Layout } from './components/Layout';\r\n\r\nexport const Contact = () => (\r\n  <Layout>\r\n\t<NavigationBar />\r\n\t<Jumbotron />\r\n    <h2 class=\"display-3\"style = {{paddingLeft:\"2%\"}}>Contact Us!</h2>  \r\n    <br/>\r\n      <p class=\"display-5\"style = {{paddingLeft:\"2%\"}}>You can reach us at XXXXXXXX@gmail.com</p>\r\n      <p class=\"display-5\"style = {{paddingLeft:\"2%\"}}>Thank You!</p>\r\n    <br/>\r\n    <br/>\r\n  </Layout>\r\n)\r\n","import React from 'react';\r\nimport { NavigationBar } from './components/NavigationBar';\r\nimport { Jumbotron } from './components/Jumbotron';\r\nimport { Layout } from './components/Layout';\r\n\r\nexport const NoMatch = () => (\r\n  <Layout>\r\n\t<NavigationBar />\r\n\t<Jumbotron />\r\n    <h2>No Match</h2>\r\n  </Layout>\r\n)\r\n","/**\r\n * Chek if email is valid\r\n * @prop String email\r\n * @returns Boolean\r\n */\r\nexport const isEmail = (email) => {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(email);\r\n}\r\n\r\n/**\r\n * Chek if vatiable is empty\r\n * @prop String thing \r\n * @returns Boolean\r\n */\r\nexport const isEmpty = (thing) => {\r\n    let empty = false;\r\n\r\n    switch (typeof thing) {\r\n        case 'undefined':\r\n            empty = true;\r\n            break;\r\n        case 'string':\r\n            if (thing.trim().length === 0) {\r\n                empty = true;\r\n            }\r\n            break;\r\n        case 'object':\r\n            if (thing === null) {\r\n                empty = true;\r\n            } else if (Object.keys(thing).length === 0) {\r\n                empty = true;\r\n            }\r\n            break;\r\n        default:\r\n            empty = true;\r\n    }\r\n\r\n    return empty;\r\n}\r\n\r\n/**\r\n * Check length of the string greater than\r\n * @prop String|Integer str\r\n * @prop boolean|options.trim Trim input before validating\r\n * @prop number|options.lt Check if length less than lt\r\n * @prop number|options.lte Check if length is less than or equals to lte\r\n * @prop number|options.gt Check if length is greater than gt\r\n * @prop number|options.gte Check if length is greater than or equals to gte\r\n * @returns Boolean\r\n */\r\nexport const isLength = (str, options) => {\r\n\r\n    if (isEmpty(options)) {\r\n        throw new Error(\"Who will provide the options you?\")\r\n    }\r\n\r\n    let isValid = true;\r\n\r\n    if (['string', 'number'].indexOf(typeof str) === -1) {\r\n        isValid = false;\r\n    } else {\r\n        // Convert to string incase it's number\r\n        let len = 0;\r\n\r\n        if(options.trim){\r\n            len = str.toString().trim().length;\r\n        } else {\r\n            len = str.toString().length;\r\n        }\r\n\r\n        if (typeof options.lt === 'number' && len >= options.lt) {\r\n            isValid = false;\r\n        } else if (typeof options.lte === 'number' && len > options.lte) {\r\n            isValid = false;\r\n        } else if (typeof options.gt === 'number' && len <= options.gt) {\r\n            isValid = false;\r\n        } else if (typeof options.gte === 'number' && len < options.gte) {\r\n            isValid = false;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n}\r\n\r\n/**\r\n * Check if string contains whitespaces\r\n * @prop String str\r\n * @returns Boolean\r\n */\r\nexport const isContainWhiteSpace = (str) => {\r\n\r\n    if(typeof str === 'string' || typeof str === 'number'){\r\n        return str.toString().trim().indexOf(' ') !== -1;\r\n    } else {\r\n        return false;\r\n    }\r\n}","import React, { useCallback, useState } from 'react';\r\nimport { hooks } from 'botframework-webchat-component';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\n\r\nconst { useSendMessage } = hooks;\r\n\r\nfunction ChatInput() {\r\n\tconst sendMessage = useSendMessage();\r\n\r\n\t// sendBoxValue is initialised as '', as nothing has been typed in yet. \r\n\t// When we call setSendBoxValue, we can update the value in the sendBox\r\n\tconst [sendBoxValue, setSendBoxValue] = useState('');\r\n\r\n\tconst handleChange = useCallback(({ target: { value } }) => setSendBoxValue(value), [setSendBoxValue]);\r\n\r\n\t// This is called when we want to send a message, the sendMessage function uses the hooks\r\n\t// from the botframework-webchat-component to relay our message, and then we must manually update\r\n\t// the submit box text\r\n\tconst handleSubmit = useCallback(\r\n\t\tevent => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tsendMessage(sendBoxValue);\r\n\t\t\tsetSendBoxValue('');\r\n\t\t},\r\n\t\t[sendBoxValue, sendMessage, setSendBoxValue]);\r\n\r\n\t// Since we're using a textarea for input, I had to create this function so that if the user presses enter\r\n\t// it sends the sendBoxValue, instead of skipping to a new line. \r\n\tconst onEnterPress = (e) => {\r\n\t\tif(e.keyCode === 13 && e.shiftKey === false) {\r\n\t\t\te.preventDefault();\r\n\t\t\tsendMessage(sendBoxValue);\r\n\t\t\tsetSendBoxValue('');\r\n\t\t}\r\n\t }\r\n\r\n    const onClickHandler = event => {\r\n        event.preventDefault();\r\n        const value = event.target.innerHTML;\r\n        if(value === \"Nederlands\")\r\n            sendMessage(\"nl\");\r\n        if(value === \"Español\")\r\n            sendMessage(\"es\");\r\n        if(value === \"English\")\r\n            sendMessage(\"en\");\r\n    }\r\n\r\n\treturn (\r\n\t\t<footer>\r\n\t\t\t\t<form className=\"FormContainer\" onSubmit={handleSubmit}>\r\n\t\t\t\t\t<textarea className=\"UserInput\" autoFocus={true} onKeyDown={onEnterPress} onChange={handleChange} value={sendBoxValue}/>\r\n\t\t\t\t</form>\r\n\t\t\t\t<ButtonGroup>\r\n                    <Button variant=\"outline-secondary\" onClick={handleSubmit}>Send</Button>\r\n                    <DropdownButton as={ButtonGroup} alignRight title=\"lang\" id=\"bg-nested-dropdown\">\r\n                        <Dropdown.Item eventKey=\"1\" value = \"en\" onClick = {onClickHandler}>English</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"2\" value = \"es\" onClick = {onClickHandler}>Español</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"3\" value = \"nl\" onClick = {onClickHandler}>Nederlands</Dropdown.Item>\r\n                    </DropdownButton>\r\n                </ButtonGroup>\r\n\t\t</footer>);\r\n}\r\n\r\nexport default ChatInput;\r\n","import React from \"react\";\r\nimport Toast from 'react-bootstrap/Toast';\r\n\r\nfunction TextBox(props) {\r\n    var thisStyle = {};\r\n    var userName = \"\";\r\n    if (props.user === \"bot\") {\r\n        userName = \"Asclepius.Tools\";\r\n        thisStyle = {alignSelf: \"flex-start\", flexShrink:0, minWidth:\"100px\", marginLeft: \"1vw\", whiteSpace: \"pre-line\"};\r\n        \r\n    }\r\n    else{ // if(props.user = \"user\") \r\n        userName = \"You\";\r\n        thisStyle = {alignSelf: \"flex-end\", flexShrink:0, minWidth:\"100px\", marginRight: \"1vw\"};\r\n    }\r\n\r\n    return (\r\n        <Toast style={thisStyle}>\r\n            <Toast.Header closeButton={false}>\r\n                <strong className=\"mr-auto\">{userName}</strong>\r\n                <small>{props.time}</small>\r\n            </Toast.Header>\r\n            <Toast.Body>{props.message}</Toast.Body>\r\n        </Toast> \r\n    );\r\n}\r\n\r\nexport default TextBox;\r\n","import React from 'react';\r\nimport TextBox from \"./TextBox.js\";\r\nimport { hooks } from 'botframework-webchat-component';\r\nimport ScrollableFeed from 'react-scrollable-feed';\r\n\r\nconst { useActivities } = hooks;\r\n\r\nfunction MessageList() {\r\n    // activities are the array of all messages to display on the screen\r\n    // if you want to see what the activities look like, uncomment the following line,\r\n    // build the app and open the developers options in firefox\r\n\r\n    const [activities] = useActivities();\r\n\r\n    console.log(activities);\r\n\r\n    // CAN IGNORE THIS FOR TIME BEING\r\n    /*\r\n\tWe can filter activites by their properties, this is how the default app filters them but\r\n\twe can have a look at these later and see which ones we need and don't need:\r\n\tactivities\r\n          // Currently, this sample only displays an activity of type \"message\"\r\n          .filter(({ type }) => type === 'message')\r\n          // We need to hide \"postBack\" message sent by the user\r\n          \r\n          // Normalize the activity:\r\n          // - Every activity should have an \"attachments\" array, consisting of zero or more attachments:\r\n          // - If this is a \"messageBack\" message, we should use the \"displayText\",\r\n          //   because \"text\" is being submitted to bot, and \"displayText\" is what we use to override what the bot displays to the user.\r\n          .map(activity => ({\r\n            ...activity,\r\n            attachments: activity.attachments || [],\r\n            text: getValueOrUndefined(activity, 'channelData', 'messageBack', 'displayText') || activity.text\r\n          }))\r\n\t\t  \r\n\t*/\r\n\r\n    activities.filter(({ type }) => type === 'message');\r\n\r\n    let today = new Date();\r\n    let i = 0;\r\n    var init = <TextBox\r\n        key = {i}\r\n        user = 'bot'\r\n        time = {(today.getHours() - 1) + ':' + today.getMinutes() + ':' + today.getSeconds()}\r\n        message = 'Welcome to Asclepius Tools\\nEnter your diagnosis to recieve information on dietary and lifestyle changes.' />\r\n\r\n    var textBoxes = activities.map(thisMessage => <TextBox\r\n        key={++i}\r\n        user={thisMessage.from.role}\r\n        time={thisMessage.timestamp.substring(11, 19)}\r\n        message={thisMessage.text} />);\r\n\r\n    return (\r\n        <ScrollableFeed forceScroll=\"true\" className=\"MessageList\">\r\n            {init}\r\n            {textBoxes}\r\n        </ScrollableFeed>\r\n    );\r\n}\r\n\r\nexport default MessageList;\r\n","import React from 'react';\r\n\r\nimport ChatInput from \"./ChatInput.js\";\r\nimport MessageList from \"./MessageList.js\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction AscToolsWebChat() {\r\n\tlet vh = window.innerHeight * 0.01;\r\n\tlet vw = window.innerWidth * 0.01;\r\n\t// Then we set the value in the --vh custom property to the root of the document\r\n\tdocument.documentElement.style.setProperty('--vh', `${vh}px`);\r\n\tdocument.documentElement.style.setProperty('--vw', `${vw}px`);\r\n\r\n\twindow.addEventListener('resize', () => {\r\n\t\t// We execute the same script as before\r\n\t\tlet vh = window.innerHeight * 0.01;\r\n\t\tlet vw = window.innerWidth * 0.01;\r\n\t\tdocument.documentElement.style.setProperty('--vh', `${vh}px`);\r\n\t\tdocument.documentElement.style.setProperty('--vw', `${vw}px`);\r\n\t  });\r\n\t\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<div className=\"WindowBackground\">\r\n\t\t\t\t<MessageList/>\r\n\t\t\t\t<ChatInput />\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default AscToolsWebChat;\r\n","import { Components } from 'botframework-webchat-component';\r\nimport { createDirectLine } from 'botframework-webchat';\r\nimport React from 'react';\r\nimport AscToolsWebChat from \"./AscToolsWebChat\";\r\n\r\nvar secret = process.env.DIRECT_LINE_SECRET;\r\n\r\nasync function getDirectLineToken() {\r\n  const res = await fetch('https://directline.botframework.com/v3/directline/tokens/generate', { method: 'POST', \r\n//  mode: 'no-cors',\r\n  headers: {\r\n//      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer iQ0RbsV7tfA.Iv9w0NYvH7OoZJxqilYyZMdbK-xLhYlco0piDalWT00'\r\n      }});\r\n  const { token } = await res.json();\r\n\r\n  return token;\r\n}\r\n\r\nfunction App() {\r\n  const [directLine, setDirectLine] = React.useState();\r\n\r\n  if (!directLine) {\r\n    // We will load DirectLineJS asynchronously on first render.\r\n    getDirectLineToken().then(token => setDirectLine(createDirectLine({ token })));\r\n  }\r\n\r\n// The following return value is just to let us know if we are connected to the MockBot\r\n// When running the app, it should switch from \"Not Connected!\" to \"Connected!\" quickly\r\n\r\n  return (\r\n\t<div>\r\n\t\t{!!directLine && (\r\n        <Components.Composer directLine={directLine}>\r\n          <AscToolsWebChat />\r\n        </Components.Composer>\r\n      )}\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport { isEmail, isEmpty, isLength, isContainWhiteSpace } from './validator';\r\nimport './login.css';\r\nimport { Row, FormGroup, FormControl, FormLabel, Button, formtext } from 'react-bootstrap';\r\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\r\nimport App  from '../WEB_CHAT/App';\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            formData: {}, // Contains  login form data\r\n            errors: {}, // Contains login field errors\r\n            formSubmitted: false, // Indicates submit status of login form\r\n            loading: false // In dicates in progress state of login form\r\n        }\r\n    } \r\n\r\n    handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        let { formData } = this.state;\r\n        formData[name] = value;\r\n\r\n        this.setState({\r\n            formData: formData\r\n        });\r\n    }\r\n\r\n    validateLoginForm = (e) => {\r\n\r\n        let errors = {};\r\n        const { formData } = this.state;\r\n\r\n        if (isEmpty(formData.email)) {\r\n            errors.email = \"Email can't be blank\";\r\n        } else if (!isEmail(formData.email)) {\r\n            errors.email = \"Please enter a valid email\";\r\n        }\r\n\r\n        if (isEmpty(formData.password)) {\r\n            errors.password = \"Password can't be blank\";\r\n        }  else if (isContainWhiteSpace(formData.password)) {\r\n            errors.password = \"Password should not contain white spaces\";\r\n        } else if (!isLength(formData.password, { gte: 6, lte: 16, trim: true })) {\r\n            errors.password = \"Password's length must between 6 to 16\";\r\n        } else if (formData.password != \"password\"){\r\n            errors.password = \"Invalid Password, Try Again\";\r\n        }\r\n\r\n        if (isEmpty(errors)) {\r\n            return true;\r\n        } else {\r\n            return errors;\r\n        }\r\n    }\r\n\r\n    login = (e) => {  \r\n\r\n        e.preventDefault();\r\n\r\n        let errors = this.validateLoginForm();\r\n\r\n        if(errors === true){\r\n           // alert(\"You are successfully signed in, click ok to proceed!\");\r\n           // window.location.reload()\r\n            this.props.history.push('/App');\r\n            //window.open(App);\r\n         } else {\r\n            this.setState({\r\n                errors: errors,\r\n                formSubmitted: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors, formSubmitted, Login } = this.state;\r\n        return (\r\n            <div className=\"Login\">\r\n              <Row>\r\n                    <form onSubmit={this.login}>\r\n                    <h2>Sign In</h2>\r\n                    <br/>\r\n                        <FormGroup  controlId=\"email\" validationState={ formSubmitted ? (errors.email ? 'error' : 'success') : null }>\r\n                            <h5>Email</h5> \r\n                            <FormControl size=\"lg\" type=\"text\" name=\"email\" placeholder=\"Enter your email\" onChange={this.handleInputChange} />\r\n                        { errors.email &&\r\n                            <formtext>{errors.email}</formtext>\r\n                        }\r\n                        </FormGroup>\r\n                        <FormGroup controlId=\"password\" validationState={ formSubmitted ? (errors.password ? 'error' : 'success') : null }>\r\n                            <h5>Password</h5>\r\n                            <FormControl size=\"lg\" type=\"password\" name=\"password\" placeholder=\"Enter your password\" onChange={this.handleInputChange} />\r\n                        { errors.password &&\r\n                            <formtext>{errors.password}</formtext>\r\n                        }\r\n                        </FormGroup>\r\n                        <Button type=\"submit\" bsStyle=\"primary\">Sign-In</Button>\r\n                    </form>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { Home } from './Home';\r\nimport { About } from './About';\r\nimport { Contact } from './Contact';\r\nimport { NoMatch } from './NoMatch';\r\nimport Login   from './components/Login';\r\n\r\nimport App from './WEB_CHAT/App';\r\nimport './cssForWebVersion.css';\r\nimport {isMobile} from 'react-device-detect';\r\n\r\nclass AscToolsSite extends Component {\r\n  renderContent = () => {\r\n    if (isMobile) {\r\n        return <App/>\r\n    }\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route path=\"/about\" component={About} />\r\n              <Route path=\"/contact\" component={Contact} />\r\n              <Route path=\"/Chat\" component={Login} />\r\n              <Route path=\"/App\" component={App} /> \r\n              <Route component={NoMatch} />\r\n            </Switch> \r\n        </Router>\r\n    );\r\n}\r\n  render() { \r\n    return this.renderContent();\r\n  }\r\n}\r\n\r\nexport default AscToolsSite;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport AscToolsSite from './AscToolsSite';\r\nimport * as serviceWorker from './WEB_CHAT/serviceWorker';\r\n\r\nReactDOM.render(<AscToolsSite />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/boatImage.5bb53262.jpg\";"],"sourceRoot":""}